(defpackage :fcl/tests.datatypes.maybe
  (:nicknames :fcl/t.dt.maybe :fcl/t.maybe)
  (:use :common-lisp :rove :fcl/tests.util :fcl.maybe)
  (:import-from :fcl.adata #:data=)
  (:import-from :fcl.match #:match)
  (:import-from :fcl.util #:compose #:partial #:curry))
(in-package :fcl/tests.datatypes.maybe)


(deftest matching
  (testing "NOTHING"
    (ok (match (nothing)
          ((nothing) t)
          ((just _) nil))))
  (testing "JUST"
    (ok (let ((a (random 1.0e9)))
          (match (just a)
            ((nothing) nil)
            ((just b) (= a b)))))))

(deftest nothing=mzero
  (testing "Equality of NOTHING and MZERO"
    (ok (data= (nothing) (mzero 'maybe)))))

(deftest just=unit
  (testing "Equality of JUST and UNIT"
    (let ((a (random 1.0e9)))
      (ok (data= (just a) (unit 'maybe a))))))

(deftest functor
  (testing "Identity"
    (dotimes (i 1000)
      (mlet ((a* (list (nothing)
                       (just (random-object)))))
        (ok (data= (fmap #'identity a*)
                   a*))
        '())))
  (testing "Composition"
    (dotimes (i 1000)
      (mlet ((a* (list (nothing)
                       (just (random-number -1000000 1000000))
                       (just (random-number -1.0e6 1.0e6))))
             (a->b (list (lambda (x) (* x x))))
             (b->c (list (lambda (x) (+ x x)))))
        (ok (data= (fmap (compose b->c a->b) a*)
                   (fmap b->c (fmap a->b a*))))
        '()))))

(deftest applicative
  (testing "Identity"
    (dotimes (i 1000)
      (mlet ((a* (list (nothing) (just (random-object)))))
        (ok (data= (amap (just #'identity) a*)
                   a*))
        '())))
  (testing "Composition"
    (dotimes (i 1000)
      (mlet ((a->*b (list (nothing) 
                          (just (lambda (x) (* x x)))))
             (b->*c (list (nothing)
                          (just (lambda (x) (+ x x)))))
             (a* (list (nothing)
                       (just (random-number -1000000 1000000))
                       (just (random-number -1.0e6 1.0e6)))))
        (ok (data= (amap (amap (amap (just (curry #'compose)) b->*c) a->*b) a*)
                   (amap b->*c (amap a->*b a*))))
        '())))
  (testing "Homomorphism"
    (dotimes (i 1000)
      (mlet ((a->b (list (lambda (x) (* x x))))
             (a (list (random-number -1000000 1000000)
                      (random-number -1.0e6 1.0e6))))
        (ok (data= (amap (just a->b) (just a))
                   (just (funcall a->b a))))
        '())))
  (testing "Interchange"
    (dotimes (i 1000)
      (mlet ((a->*b (list (nothing)
                          (just (lambda (x) (* x x)))))
             (a (list (random-number -1000000 1000000)
                      (random-number -1.0e6 1.0e6))))
        (ok (data= (amap a->*b (just a))
                   (amap (just (lambda (a->b) (funcall a->b a))) a->*b)))
        '()))))

(deftest monad
  (testing "Left Identity"
    (let ((f (lambda (x) (just (* x x))))
          (a (random 1.0e9)))
      (ok (data= (mmap f (nothing))
                 (nothing)))
      (ok (data= (mmap f (just a))
                 (funcall f a)))))
  (testing "Right Identity"
    (let ((a (random 1.0e9)))
      (ok (data= (mmap #'just (nothing))
                 (nothing)))
      (ok (data= (mmap #'just (just a))
                 (just a)))))
  (testing "Associativity"
    (let ((f (lambda (x) (just (* x x))))
          (f- (lambda (x) (declare (ignore x)) (nothing)))
          (g (lambda (x) (just (+ x x))))
          (g- (lambda (x) (declare (ignore x)) (nothing)))
          (a (random 1.0e9)))
      ;;; g- f- (nothing)
      (ok (data= (mmap (lambda (a) (mmap g- (funcall f- a))) (nothing))
                 (mmap g- (mmap f- (nothing)))))
      ;;; g- f- (just a)
      (ok (data= (mmap (lambda (a) (mmap g- (funcall f- a))) (just a))
                 (mmap g- (mmap f- (just a)))))
      ;;; g- f (nothing)
      (ok (data= (mmap (lambda (a) (mmap g- (funcall f a))) (nothing))
                 (mmap g- (mmap f (nothing)))))
      ;;; g- f (just a)
      (ok (data= (mmap (lambda (a) (mmap g- (funcall f a))) (just a))
                 (mmap g- (mmap f (just a)))))
      ;;; g f- (nothing)
      (ok (data= (mmap (lambda (a) (mmap g (funcall f- a))) (nothing))
                 (mmap g (mmap f- (nothing)))))
      ;;; g f- (just a)
      (ok (data= (mmap (lambda (a) (mmap g (funcall f- a))) (just a))
                 (mmap g (mmap f- (just a)))))
      ;;; g f (nothing)
      (ok (data= (mmap (lambda (a) (mmap g (funcall f a))) (nothing))
                 (mmap g (mmap f (nothing)))))
      ;;; g f (just a)
      (ok (data= (mmap (lambda (a) (mmap g (funcall f a))) (just a))
                 (mmap g (mmap f (just a))))))))

(deftest monoid
  (testing "Identity"
    (let ((a (random 1.0e9)))
      (ok (data= (mplus (nothing) (just a))
                 (just a)))
      (ok (data= (mplus (just a) (nothing))
                 (just a)))))
  (testing "Associativity"
    (let ((a (list (random 1.0e9)))
          (b (list (random 1.0e9)))
          (c (list (random 1.0e9))))
      ;; (nothing) (nothing) (nothing)
      (ok (data= (mplus (mplus (nothing) (nothing)) (nothing))
                 (mplus (nothing) (mplus (nothing) (nothing)))))
      ;; (nothing) (nothing) (just c)
      (ok (data= (mplus (mplus (nothing) (nothing)) (just c))
                 (mplus (nothing) (mplus (nothing) (just c)))))
      ;; (nothing) (just b) (nothing)
      (ok (data= (mplus (mplus (nothing) (just b)) (nothing))
                 (mplus (nothing) (mplus (just b) (nothing)))))
      ;; (nothing) (just b) (just c)
      (ok (data= (mplus (mplus (nothing) (just b)) (just c))
                 (mplus (nothing) (mplus (just b) (just c)))))
      ;; (just a) (nothing) (nothing)
      (ok (data= (mplus (mplus (just a) (nothing)) (nothing))
                 (mplus (just a) (mplus (nothing) (nothing)))))
      ;; (just a) (nothing) (just c)
      (ok (data= (mplus (mplus (just a) (nothing)) (just c))
                 (mplus (just a) (mplus (nothing) (just c)))))
      ;; (just a) (just b) (nothing)
      (ok (data= (mplus (mplus (just a) (just b)) (nothing))
                 (mplus (just a) (mplus (just b) (nothing)))))
      ;; (just a) (just b) (just c)
      (ok (data= (mplus (mplus (just a) (just b)) (just c))
                 (mplus (just a) (mplus (just b) (just c))))))))
